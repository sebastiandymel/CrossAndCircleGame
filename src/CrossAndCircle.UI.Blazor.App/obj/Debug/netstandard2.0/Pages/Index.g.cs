#pragma checksum "C:\CODE\CrossAndCircleGame\src\CrossAndCircle.UI.Blazor.App\Pages\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "54fcdde251acab10901fe70b99ed39fc0e146dce"
// <auto-generated/>
#pragma warning disable 1591
namespace CrossAndCircle.UI.Blazor.App.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Blazor;
    using Microsoft.AspNetCore.Blazor.Components;
    using System.Net.Http;
    using Microsoft.AspNetCore.Blazor.Layouts;
    using Microsoft.AspNetCore.Blazor.Routing;
    using Microsoft.JSInterop;
    using CrossAndCircle.UI.Blazor.App;
    using CrossAndCircle.UI.Blazor.App.Shared;
    using GameEngine;
    [Microsoft.AspNetCore.Blazor.Layouts.LayoutAttribute(typeof(MainLayout))]

    [Microsoft.AspNetCore.Blazor.Components.RouteAttribute("/")]
    public class Index : Microsoft.AspNetCore.Blazor.Components.BlazorComponent
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder builder)
        {
            base.BuildRenderTree(builder);
            builder.AddMarkupContent(0, "<h1>CROSS AND CIRCLE GAME</h1>\n\n<br>\n\n\n\n\n");
            builder.OpenElement(1, "div");
            builder.AddContent(2, "\n    ");
            builder.OpenElement(3, "ul");
            builder.AddAttribute(4, "class", "list");
            builder.AddContent(5, "\n        ");
            builder.OpenElement(6, "li");
            builder.AddAttribute(7, "class", "list__item");
            builder.AddContent(8, "\n            ");
            builder.OpenElement(9, "input");
            builder.AddAttribute(10, "type", "radio");
            builder.AddAttribute(11, "name", "mode");
            builder.AddAttribute(12, "checked", selectedMode == GameMode.Player_vs_Player);
            builder.AddAttribute(13, "onclick", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetEventHandlerValue<Microsoft.AspNetCore.Blazor.UIMouseEventArgs>(() => selectedMode = GameMode.Player_vs_Player));
            builder.AddAttribute(14, "id", "a-opt");
            builder.CloseElement();
            builder.AddContent(15, "\n            ");
            builder.AddMarkupContent(16, "<label for=\"a-opt\" class=\"label\">Player vs Player</label>\n        ");
            builder.CloseElement();
            builder.AddContent(17, "\n        ");
            builder.OpenElement(18, "li");
            builder.AddAttribute(19, "class", "list__item");
            builder.AddContent(20, "\n            ");
            builder.OpenElement(21, "input");
            builder.AddAttribute(22, "type", "radio");
            builder.AddAttribute(23, "name", "mode");
            builder.AddAttribute(24, "checked", selectedMode == GameMode.Player_vs_Computer);
            builder.AddAttribute(25, "onclick", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetEventHandlerValue<Microsoft.AspNetCore.Blazor.UIMouseEventArgs>(() => selectedMode = GameMode.Player_vs_Computer));
            builder.AddAttribute(26, "id", "a-opt");
            builder.CloseElement();
            builder.AddContent(27, "\n            ");
            builder.AddMarkupContent(28, "<label for=\"b-opt\" class=\"label\">Player vs Computer</label>\n        ");
            builder.CloseElement();
            builder.AddContent(29, "\n    ");
            builder.CloseElement();
            builder.AddContent(30, "\n    ");
            builder.OpenElement(31, "button");
            builder.AddAttribute(32, "class", "btn btn-primary");
            builder.AddAttribute(33, "onclick", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetEventHandlerValue<Microsoft.AspNetCore.Blazor.UIMouseEventArgs>(StartNewGame));
            builder.AddContent(34, "Start game");
            builder.CloseElement();
            builder.AddContent(35, "\n");
            builder.CloseElement();
            builder.AddMarkupContent(36, "\n\n\n<br><br><br>\n\n\n\n\n");
#line 38 "C:\CODE\CrossAndCircleGame\src\CrossAndCircle.UI.Blazor.App\Pages\Index.cshtml"
 if (game != null)
{

#line default
#line hidden
            builder.AddContent(37, "    ");
            builder.OpenElement(38, "div");
            builder.AddAttribute(39, "class", "card");
            builder.AddAttribute(40, "style", "padding:10px 10px 10px 10px");
            builder.AddContent(41, "\n        ");
            builder.OpenElement(42, "div");
            builder.AddContent(43, "\n");
#line 42 "C:\CODE\CrossAndCircleGame\src\CrossAndCircle.UI.Blazor.App\Pages\Index.cshtml"
             if (game != null && game.Current != null)
            {
                

#line default
#line hidden
#line 44 "C:\CODE\CrossAndCircleGame\src\CrossAndCircle.UI.Blazor.App\Pages\Index.cshtml"
                 for (int i = 0; i < game.Current.Rows.Length; i++)
                {
                    if (i > 0)
                    {

#line default
#line hidden
            builder.AddMarkupContent(44, "                        <br>\n");
#line 49 "C:\CODE\CrossAndCircleGame\src\CrossAndCircle.UI.Blazor.App\Pages\Index.cshtml"
                    }
                    

#line default
#line hidden
#line 50 "C:\CODE\CrossAndCircleGame\src\CrossAndCircle.UI.Blazor.App\Pages\Index.cshtml"
                     for (int j = 0; j < game.Current.Cols.Length; j++)
                    {
                        var copyi = i;
                        var copyj = j;


#line default
#line hidden
            builder.AddContent(45, "                        ");
            builder.OpenElement(46, "button");
            builder.AddAttribute(47, "onclick", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetEventHandlerValue<Microsoft.AspNetCore.Blazor.UIMouseEventArgs>(() => SetPosition(copyi, copyj)));
            builder.AddAttribute(48, "class", "btn btn-secondary");
            builder.AddAttribute(49, "style", "width: 50px; height:50px; margin:5px");
            builder.AddMarkupContent(50, "\n                            \n                            \n                            \n");
#line 59 "C:\CODE\CrossAndCircleGame\src\CrossAndCircle.UI.Blazor.App\Pages\Index.cshtml"
                             if (game.Current[i, j] == GameBoard.Player.Circle)
                            {
                                if (IsWinningPosition(copyi, copyj))
                                {

#line default
#line hidden
            builder.AddContent(51, "                                    ");
            builder.AddMarkupContent(52, "<h1 style=\"font-size:40px; color:red; margin:-5px 0px 0px -4px\">O</h1>\n");
#line 64 "C:\CODE\CrossAndCircleGame\src\CrossAndCircle.UI.Blazor.App\Pages\Index.cshtml"
                                }
                                else
                                {

#line default
#line hidden
            builder.AddContent(53, "                                    ");
            builder.AddMarkupContent(54, "<h1 style=\"font-size:40px; margin:-5px 0px 0px -4px\">O</h1>\n");
#line 68 "C:\CODE\CrossAndCircleGame\src\CrossAndCircle.UI.Blazor.App\Pages\Index.cshtml"
                                }

                            }

#line default
#line hidden
            builder.AddMarkupContent(55, "                            \n                            \n                            \n");
#line 74 "C:\CODE\CrossAndCircleGame\src\CrossAndCircle.UI.Blazor.App\Pages\Index.cshtml"
                             if (game.Current[i, j] == GameBoard.Player.Cross)
                            {
                                if (IsWinningPosition(copyi, copyj))
                                {

#line default
#line hidden
            builder.AddContent(56, "                                    ");
            builder.AddMarkupContent(57, "<h1 style=\"font-size:40px; color:red; margin:-4px 0px 0px -3px\">X</h1>\n");
#line 79 "C:\CODE\CrossAndCircleGame\src\CrossAndCircle.UI.Blazor.App\Pages\Index.cshtml"
                                }
                                else
                                {

#line default
#line hidden
            builder.AddContent(58, "                                    ");
            builder.AddMarkupContent(59, "<h1 style=\"font-size:40px; margin:-4px 0px 0px -3px\">X</h1>\n");
#line 83 "C:\CODE\CrossAndCircleGame\src\CrossAndCircle.UI.Blazor.App\Pages\Index.cshtml"
                                }

                            }

#line default
#line hidden
            builder.AddContent(60, "                        ");
            builder.CloseElement();
            builder.AddContent(61, "\n");
#line 87 "C:\CODE\CrossAndCircleGame\src\CrossAndCircle.UI.Blazor.App\Pages\Index.cshtml"
                    }

#line default
#line hidden
#line 87 "C:\CODE\CrossAndCircleGame\src\CrossAndCircle.UI.Blazor.App\Pages\Index.cshtml"
                     
                }

#line default
#line hidden
#line 88 "C:\CODE\CrossAndCircleGame\src\CrossAndCircle.UI.Blazor.App\Pages\Index.cshtml"
                 
            }

#line default
#line hidden
            builder.AddContent(62, "        ");
            builder.CloseElement();
            builder.AddContent(63, "\n    ");
            builder.CloseElement();
            builder.AddContent(64, "\n");
#line 92 "C:\CODE\CrossAndCircleGame\src\CrossAndCircle.UI.Blazor.App\Pages\Index.cshtml"
}

#line default
#line hidden
            builder.AddMarkupContent(65, "\n<br>\n\n\n\n\n");
            builder.OpenElement(66, "div");
            builder.AddContent(67, "\n");
#line 100 "C:\CODE\CrossAndCircleGame\src\CrossAndCircle.UI.Blazor.App\Pages\Index.cshtml"
     if (circleWinsGame)
    {

#line default
#line hidden
            builder.AddContent(68, "        ");
            builder.AddMarkupContent(69, "<h2>Congratulations! Circle wins the game! :)</h2>\n");
#line 103 "C:\CODE\CrossAndCircleGame\src\CrossAndCircle.UI.Blazor.App\Pages\Index.cshtml"
    }

#line default
#line hidden
            builder.AddContent(70, "    ");
#line 104 "C:\CODE\CrossAndCircleGame\src\CrossAndCircle.UI.Blazor.App\Pages\Index.cshtml"
     if (crossWinsGame)
    {

#line default
#line hidden
            builder.AddContent(71, "        ");
            builder.AddMarkupContent(72, "<h2>Congratulations! Cross wins the game! :)</h2>\n");
#line 107 "C:\CODE\CrossAndCircleGame\src\CrossAndCircle.UI.Blazor.App\Pages\Index.cshtml"
    }

#line default
#line hidden
            builder.AddContent(73, "    ");
#line 108 "C:\CODE\CrossAndCircleGame\src\CrossAndCircle.UI.Blazor.App\Pages\Index.cshtml"
     if (gameEndsWithoutWinner)
    {

#line default
#line hidden
            builder.AddContent(74, "        ");
            builder.AddMarkupContent(75, "<h2>Tie! There is no winner :(</h2>\n");
#line 111 "C:\CODE\CrossAndCircleGame\src\CrossAndCircle.UI.Blazor.App\Pages\Index.cshtml"
    }

#line default
#line hidden
            builder.CloseElement();
        }
        #pragma warning restore 1998
#line 118 "C:\CODE\CrossAndCircleGame\src\CrossAndCircle.UI.Blazor.App\Pages\Index.cshtml"
            

private WebGame game;
private GameBoard.Player p1Id = GameBoard.Player.Circle;
private GameBoard.Player p2Id = GameBoard.Player.Cross;
private bool circleWinsGame;
private bool crossWinsGame;
private bool gameEndsWithoutWinner;
private List<GameMode> modes = new List<GameMode> { GameMode.Player_vs_Computer, GameMode.Player_vs_Player };
private GameMode selectedMode;

private void StartNewGame()
{
    CreateGame();
    if (this.selectedMode == GameMode.Player_vs_Computer)
    {
        this.game.Start(p1Id);
    }
    else if (this.selectedMode == GameMode.Player_vs_Player)
    {
        this.game.Start(p1Id, p2Id);
    }
    ClearFlags();
}
private void CreateGame()
{
    if (this.game == null)
    {
        this.game = new WebGame();
        this.game.StateChanged += OnStateChanged;
    }
}
private void ClearFlags()
{
    this.circleWinsGame = false;
    this.crossWinsGame = false;
    this.gameEndsWithoutWinner = false;
}
private void OnStateChanged(object sender, EventArgs ea)
{
    if (this.game.EndStatus.HasValue && this.game.EndStatus.Value == EndStatus.CircleWins)
    {
        circleWinsGame = true;
    }
    if (this.game.EndStatus.HasValue && this.game.EndStatus.Value == EndStatus.CrossWins)
    {
        crossWinsGame = true;
    }
    if (this.game.EndStatus.HasValue && this.game.EndStatus.Value == EndStatus.Draw)
    {
        gameEndsWithoutWinner = true;
    }
}
void SetPosition(int i, int j)
{
    this.game.Move(i, j);
}
private bool IsWinningPosition(int x, int y)
{
    return this.game.WinningPositions.Any(w => w.X == x && w.Y == y);
}

internal enum GameMode
{
    Player_vs_Computer,
    Player_vs_Player,
}

#line default
#line hidden
    }
}
#pragma warning restore 1591
