#pragma checksum "C:\CODE\CrossAndCircleGame\src\CrossAndCircle.UI.Blazor.App\Pages\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "2f183b78d7ec9ab85821077d91b6d35a3b687831"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace CrossAndCircle.UI.Blazor.App.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Blazor;
    using Microsoft.AspNetCore.Blazor.Components;
    using System.Net.Http;
    using Microsoft.AspNetCore.Blazor.Layouts;
    using Microsoft.AspNetCore.Blazor.Routing;
    using Microsoft.JSInterop;
    using CrossAndCircle.UI.Blazor.App;
    using CrossAndCircle.UI.Blazor.App.Shared;
    using GameEngine;
    [Microsoft.AspNetCore.Blazor.Layouts.LayoutAttribute(typeof(MainLayout))]

    [Microsoft.AspNetCore.Blazor.Components.RouteAttribute("/")]
    public class Index : Microsoft.AspNetCore.Blazor.Components.BlazorComponent
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder builder)
        {
        }
        #pragma warning restore 1998
#line 90 "C:\CODE\CrossAndCircleGame\src\CrossAndCircle.UI.Blazor.App\Pages\Index.cshtml"
            

    private WebGame game;
    private GameBoard.Player p1Id = GameBoard.Player.Circle;
    private GameBoard.Player p2Id = GameBoard.Player.Cross;
    private bool circleWinsGame;
    private bool crossWinsGame;
    private bool gameEndsWithoutWinner;

    private void StartNewGame_vsComputer()
    {
        CreateGame();
        this.game.Start(p1Id);
        ClearFlags();
    }

    private void StartNewGame_1vs1()
    {
        CreateGame();
        this.game.Start(p1Id, p2Id);
        ClearFlags();
    }

    private void CreateGame()
    {
        if (this.game == null)
        {
            this.game = new WebGame();
            this.game.StateChanged += OnStateChanged;
        }
    }

    private void ClearFlags()
    {
        this.circleWinsGame = false;
        this.crossWinsGame = false;
        this.gameEndsWithoutWinner = false;
    }

    private void OnStateChanged(object sender, EventArgs ea)
    {
        if (this.game.EndStatus.HasValue && this.game.EndStatus.Value == EndStatus.CircleWins)
        {
            circleWinsGame = true;
        }
        if (this.game.EndStatus.HasValue && this.game.EndStatus.Value == EndStatus.CrossWins)
        {
            crossWinsGame = true;
        }
        if (this.game.EndStatus.HasValue && this.game.EndStatus.Value == EndStatus.Draw)
        {
            gameEndsWithoutWinner = true;
        }
    }

    void SetPosition(int i, int j)
    {
        this.game.Move(i, j);
    }
    private bool IsWinningPosition(int x, int y)
    {
        return this.game.WinningPositions.Any(w => w.X == x && w.Y == y);
    }

#line default
#line hidden
    }
}
#pragma warning restore 1591
